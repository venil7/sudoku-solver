{"version":3,"sources":["src/sudoku.ts","src/index.ts"],"names":[],"mappings":"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","file":"src.f756a636.js","sourceRoot":"..","sourcesContent":["type Cell = { val: number; fixed: boolean };\nexport type Sudoku = Cell[];\ntype Row = [...number[]] & { length: 9 };\n\nconst copy = (sudoku: Sudoku): Sudoku =>\n  sudoku.map(({ val, fixed }) => ({ val, fixed }));\n\nconst get = (sudoku: Sudoku) => (row: number, col: number): Cell => {\n  const { val, fixed } = sudoku[row * 9 + col];\n  return { val, fixed };\n};\n\nconst set = (sudoku: Sudoku, indx: number, val: number): Sudoku => {\n  const cpy = copy(sudoku);\n  cpy[indx].val = val;\n  return cpy;\n};\n\nconst row = (sudoku: Sudoku) => (c: number): Row => {\n  const start = c * 9;\n  const finish = start + 9;\n  const res = sudoku.slice(start, finish).map(({ val }) => val) as Row;\n  return res;\n};\n\nconst column = (sudoku: Sudoku) => (r: number): Row => {\n  const res = Array.from(Array(9)).map((_, row) => {\n    const idx = row * 9 + r;\n    return sudoku[idx].val;\n  }) as Row;\n\n  return res;\n};\n\nconst quad = (sudoku: Sudoku) => (row: number, col: number): Row => {\n  const getCell = get(sudoku);\n  const r = Math.floor(row / 3) * 3;\n  const c = Math.floor(col / 3) * 3;\n  let res = [\n    getCell(r, c).val,\n    getCell(r + 1, c).val,\n    getCell(r + 2, c).val,\n    getCell(r, c + 1).val,\n    getCell(r + 1, c + 1).val,\n    getCell(r + 2, c + 1).val,\n    getCell(r, c + 2).val,\n    getCell(r + 1, c + 2).val,\n    getCell(r + 2, c + 2).val\n  ] as Row;\n\n  return res;\n};\n\nconst check = (row: Row): boolean => {\n  const noEmpties = row.filter(x => x > 0);\n  const unique: number[] = Array.from(new Set<number>(noEmpties).values());\n  let res = noEmpties.length === unique.length;\n  return res;\n};\n\nexport const valid = (sudoku: Sudoku): boolean => {\n  const getRow = row(sudoku);\n  const getCol = column(sudoku);\n  const getQuad = quad(sudoku);\n  return (\n    Array.from(Array(9))\n      .map((_, i) => getRow(i))\n      .map(check)\n      .every(x => x) &&\n    Array.from(Array(9))\n      .map((_, i) => getCol(i))\n      .map(check)\n      .every(x => x) &&\n    Array.from(Array(9))\n      .map((_, i) => getQuad(Math.floor(i / 3) * 3, Math.floor(i % 3) * 3))\n      .map(check)\n      .every(x => x)\n  );\n};\n\nexport const solve = (\n  sudoku: Sudoku,\n  indexes: number[] | null = null\n): Sudoku | null => {\n  indexes =\n    indexes ||\n    sudoku.reduce(\n      (acc, cell, i) => (cell.fixed ? acc : [...acc, i]),\n      <number[]>[]\n    );\n  if (!valid(sudoku)) return null;\n\n  const [index = -1, ...rest] = indexes;\n  if (index === -1) return sudoku;\n  for (let i = 1; i <= 9; i++) {\n    const s = solve(set(sudoku, index, i), rest);\n    if (s) return s;\n  }\n  return null;\n};\n","import { solve, Sudoku, valid } from \"./sudoku\";\n\nconst display = (s: Sudoku | null): string => {\n  return s\n    ? s.reduce((acc, item, idx) => {\n        return `${acc} ${item.val || \"_\"}${(idx + 1) % 9 === 0 ? \"\\n\" : \"\"}`;\n      }, ``)\n    : \"no solution\";\n};\n\n// prettier-ignore\nconst sudoku: Sudoku = [\n  5,3,0,0,7,0,0,0,0,\n  6,0,0,1,9,5,0,0,0,\n  0,9,8,0,0,0,0,6,0,\n  8,0,0,0,6,0,0,0,3,\n  4,0,0,8,0,3,0,0,1,\n  7,0,0,0,2,0,0,0,6,\n  0,6,0,0,0,0,2,8,0,\n  0,0,0,4,1,9,0,0,5,\n  0,0,0,0,8,0,0,7,9,\n].map(x => ({ val: x, fixed: !!x }));\n\n// prettier-ignore\nconst sudoku2: Sudoku = [\n  9,0,0,0,0,5,0,4,0,\n  0,0,0,0,8,0,2,1,0,\n  0,0,0,9,0,0,7,0,3,\n  0,0,0,1,0,0,5,0,0,\n  3,0,0,2,5,6,0,0,7,\n  0,0,7,0,0,9,0,0,0,\n  1,0,6,0,0,7,0,0,0,\n  0,7,8,0,1,0,0,0,0,\n  0,9,0,5,0,0,0,0,8\n].map(x => ({ val: x, fixed: !!x }));\n\n((s: Sudoku) => {\n  document!.getElementById(\"app\")!.innerHTML = display(s);\n  document!.getElementById(\"run\")!.onclick = () => {\n    const res = solve(s);\n    document!.getElementById(\"app\")!.innerHTML = display(res);\n  };\n})(sudoku2);\n"]}